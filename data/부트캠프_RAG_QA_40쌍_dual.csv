question,answer
초반 수업 흐름이 너무 빠르고 정신이 없습니다.,"수업이 너무 빨라서 당황스럽습니다.

익숙하지 않은 용어와 툴(예: Jupyter, Markdown, VSCode 등)은 당연히 버겁습니다. 아래 방식으로 안정감을 잡아보세요.

실행 방법:
Notion에 “오늘 처음 들은 단어 리스트” 만들기 → 수업 후 각자 1줄씩 정의 정리

수업 중 한 번이라도 놓친 내용은 즉시 “❓” 표시 → 수업 끝나고 반드시 검색 또는 질문

혼란 포인트는 블로그 회고에 “오늘 헷갈린 것 TOP3”로 요약"
기본 지식이 부족해서 따라가기 벅찹니다.,"비전공자인데 너무 어렵습니다.

전공자도 비슷한 지점에서 막힙니다. 중요한 건 속도가 아니라 기초를 반복해 체화하는 전략입니다.

실행 방법:
Python 문법은 교재 예제 → 빈칸만 다시 타이핑하는 방식으로 손에 익히기

실습 코드 중 이해 안 간 부분은 → 구글링 후 해당 줄 옆에 직접 주석 달기

“몰랐던 개념 요약 + 내가 해석한 방식”을 블로그 회고에 매일 1개씩 정리"
수업이 끝나면 뭘 복습해야 할지 막막합니다.,"복습을 잘 못 하겠어요. 어떻게 해야 하나요?

복습은 '전체 반복'이 아니라 **'오늘 막혔던 1~2개만 복습하는 구조'**로 접근해야 유지됩니다.

실행 방법:
수업이 끝난 직후 → “오늘 막혔던 코드 TOP2” 복사해서 내 Notion에 붙여놓기

저녁에 그 코드 다시 실행해보기 + 한 줄씩 설명 주석 달기

블로그 회고 제목을 **“오늘 내가 이해한 것 1개만 설명해보기”**로 제한"
다들 빠르게 가는데 나는 하나하나 이해 안 돼요.,"진도가 너무 빨라요. 놓치면 어떻게 하나요?

진도 스트레스를 줄이려면 “전체 중 핵심만 챙기는 기술”이 필요합니다.

실행 방법:
매 수업마다 “오늘 가장 핵심 개념 1개”만 선정해서 따로 정리

하루 10분만 투자해서 “내가 오늘 동기에게 설명할 수 있는 것 1개만 연습”

블로그 회고는 “수업 전체 정리”가 아니라, “오늘 개념 요약 1개 + 관련 예제 코드 1개” 구조로 단순화"
강의 후 바로 실습하는 게 너무 부담입니다.,"실습 시간이 너무 어려워요. 어떻게 적응해야 하죠?

실습은 시험이 아니라 **“실패 허용 구간”**입니다. 틀리고 구글링하고 고치면서 배우는 게 핵심이에요.

실행 방법:
실습 시간엔 처음부터 정답 찾으려 하지 말고, 빈칸부터 채워보기

막히는 포인트는 # ❓ 이 부분 잘 이해 안 됨 표시하고 저장

수업 끝난 뒤엔 GitHub에 내 실습 코드를 올리고, 주석으로 내가 직접 요약한 흐름 정리"
하루 끝나면 진이 빠지고 ‘이 길이 맞나’ 싶은 생각이 듭니다.,"멘탈이 자꾸 무너집니다. 지치는 걸 어떻게 극복하죠?

중요한 건 **‘멘탈을 올리는 기술’보다 ‘무너지지 않게 받쳐주는 습관’**입니다.

실행 방법:
하루 마무리에 “오늘 이건 해냈다”를 Google Keep이나 다이어리에 1문장 기록

매주 금요일, 그 기록을 5분간 읽어보며 스스로의 흐름 확인

누군가의 회고글에 댓글 1개 달기 → 공감 공유가 멘탈에 큰 버팀목이 됨"
"블로그 회고 쓰는 게 어렵고, 중간에 자주 멈춰요.","회고를 어떻게 써야 꾸준히 쓸 수 있나요?

회고는 잘 쓰는 게 아니라 **“쓰기 쉽게 구조화하는 게 먼저”**입니다.

실행 방법:
템플릿 고정:
① 오늘 배운 개념 1줄 요약
② 가장 막혔던 실습 설명
③ 내일 복습할 것 메모 1개

복붙 가능한 회고 틀을 Notion에 만들어두고, 매일 ‘비워진 틀’만 채우는 방식으로 작성"
피드백을 들어도 막상 실전에 적용이 안 됩니다.,"강사님 피드백을 어떻게 활용해야 하나요?

피드백을 ‘한 번 듣고 끝’이 아니라, 실습 코드에 흡수시켜야 체화됩니다.

실행 방법:
수업 중 받은 피드백은 → 실습 코드 복붙 후 주석으로 요약해서 정리

“피드백 받은 날” 태그를 만들어서 매주 다시 그 코드만 열어보기

회고에 “오늘 들은 피드백 → 내가 바꾼 코드 예시”를 반드시 첨부"
팀 프로젝트나 단위 과제가 너무 막막해요.,"프로젝트나 과제가 너무 부담됩니다.

프로젝트는 완성보다 **""기록 중심 협업 연습""**이라고 생각하세요.

실행 방법:
회의 시간에는 ‘역할 분담’보다 먼저 “오늘 내가 해야 할 질문”을 미리 작성

팀 GitHub에 “📁 내 폴더 + README.md” 만들고 내가 맡은 파트 설명 5줄 이상 쓰기

기능 구현보다 먼저 → 데이터 흐름 도식화(예: mermaid, draw.io) 후 팀원 공유"
질문이 어설플까봐 말 꺼내기가 힘듭니다.,"질문을 잘 못하겠어요. 부끄럽고 눈치 보여요.

질문은 “모르는 걸 묻는 것”이 아니라 **“공유 가능한 사고의 흔적”**입니다.

실행 방법:
실습 중 막히면 # ❓질문 후보 태그 달기 → 수업 끝난 뒤 3개 중 1개만 정제해서 디스코드에 올리기

질문 포맷 고정: 문제상황 → 내가 시도한 방법 → 막힌 지점 요약

Notion에 “내가 했던 질문 모음집” 정리 → 나중에 블로그로 확장 가능"
"다들 앞서 나가는 것 같고, 나만 뒤처진 것 같아요.","진도가 빨라서 자꾸 불안해집니다.

진도 불안은 ‘전체를 따라가려는 마음’에서 옵니다. 핵심만 따라가야 합니다.

실행 방법:
수업마다 **“오늘 반드시 기억해야 할 개념 1개”**를 정해 따로 기록 (예: if 문, range 함수 등)

그 개념만으로 직접 예제 1개 만들기 (단순한 계산기, 구구단 등)

매주 금요일마다 “내가 확실히 이해한 개념 5개”만 추려서 Notion에 정리"
"비전공자인데, 전공자들 보면 위축돼요.","전공자와 비교되면서 자존감이 떨어집니다.

비교 스트레스는 피할 수 없지만, “비교 → 추월 전략”으로 전환할 수 있습니다.

실행 방법:
매일 10분간 ‘전공자 코드’ 1개만 따라 써보고, 내가 이해한 방식으로 주석 달기

스터디 참여 전 → “오늘 내가 질문할 것 1개”를 미리 정리해 질문 훈련하기

매주 수요일 → ‘지난주 내 실습 코드’와 ‘스터디 코드’ 비교 후 리팩토링 연습"
꾸준히 복습하는 습관을 어떻게 만들 수 있을까요?,"복습 루틴을 만들어보고 싶은데 잘 안 됩니다.

복습은 정해진 시간보다 **‘지나간 개념을 다시 불러오는 흐름’**을 만드는 게 중요합니다.

실행 방법:
하루 루틴 구조 고정:
오전 수업 전 15분: 전날 실습 코드 다시 보기
점심 직전 10분: 오전 수업 핵심 개념 요약
퇴근 전 5분: 오늘 가장 헷갈렸던 개념 메모

주말: “이번주 개념 퀴즈” 형식으로 노션에 자기 문제 만들기"
구글링이 익숙하지 않아 막히면 바로 멘붕입니다.,"구글링으로 혼자 해결하는 게 어렵습니다.

검색은 기술입니다. 문장 쓰듯 찾지 말고, 키워드 단위로 쪼개세요.

실행 방법:
검색할 땐 파이썬 + 문제 핵심 키워드 조합으로 검색 (예: ""파이썬 리스트 중복 제거"")

Stack Overflow 찾을 땐 에러 메시지 전체 복붙 → 첫 5개 답변만 정독

찾은 코드 중 마음에 드는 것 1개를 직접 타이핑하며 실행 + 주석 추가"
"배운 건 많은데, 내가 진짜 늘고 있는지 모르겠어요.","성장이 체감되지 않아 불안합니다.

성장은 절대 감정이 아니라 기록으로 확인해야 합니다.

실행 방법:
매주 회고에 “이번주 내가 처음 성공한 코드/개념” 항목 따로 만들기

실습한 코드 중에서 가장 애쓴 코드 1개 골라 → 파일명에 날짜 + 주석 달아 보관

금요일마다 그 주 월요일 코드와 비교해서 줄 수/반복/주석 등을 직접 비교"
실습을 바로 하라는데 뭐부터 해야 할지 막막해요.,"실습 위주 수업이 부담스럽습니다.

실습은 정답을 만드는 게 아니라, **“막히는 포인트를 수집하는 시간”**입니다.

실행 방법:
실습 시작 전 → 강의 예제 중 “비슷한 유형의 문제” 1개 복사해서 먼저 실행해보기

코드 작성 시, 막히는 부분은 # 여기가 왜 안 되는지 모르겠음 주석 추가

실습 후, 본인 코드에 주석으로 실행 흐름 정리 → GitHub에 업로드"
"뭘 물어봐야 할지도 모르겠고, 괜히 눈치 보여요.","질문하기가 너무 어렵습니다.

질문은 **'답을 얻는 행위'가 아니라, '사고 흐름을 검증하는 도구'**입니다.

실행 방법:
Notion에 “내가 막힌 지점 정리 템플릿” 만들기:
① 문제 상황 ② 내가 시도한 것 ③ 현재 상태

수업 중 질문이 생기면 메모해두고 → 끝나고 3개 중 1개만 디스코드에 공유

스터디나 조원에게 질문할 땐, 해당 코드와 에러 메시지를 함께 전달"
수업 끝나면 뭘 배웠는지 까먹어요.,"강의 내용을 기억에 남기기 어렵습니다.

강의 정리는 수업 직후 15분 요약 루틴이 핵심입니다.

실행 방법:
수업 끝난 직후, 오늘 새로 배운 개념 1~2개를 Markdown에 적기

그 개념을 활용한 예제를 1줄 코드로 작성 + 출력값 확인

“배운 개념 + 내가 작성한 예시 + 설명”을 블로그 회고에 고정 템플릿으로 정리"
다른 사람들은 다 잘해 보이고 나만 부족해 보여요.,"실력 있는 동기들과 비교하게 됩니다.

비교는 감정이 아니라 자료로 수집해서 '패턴'을 분석하는 도구로 바꿔야 합니다.

실행 방법:
동기 코드 중 “깔끔하다고 느낀 코드” 1개만 복사 → 내 코드와 한 줄씩 비교 주석 작성

내가 놓친 부분은 → “리팩토링 기록용” Notion에 모아두기

매주 금요일마다 ‘내가 이번주 가장 많이 실수한 코드 패턴 TOP3’ 정리"
"프로젝트가 뭔가 거창하고, 나만 민폐될까봐 겁나요.","단위 프로젝트나 과제가 어렵고 무섭습니다.

프로젝트는 완성보다 ‘기록과 커뮤니케이션 훈련’에 중점을 둬야 적응이 쉬워요.

실행 방법:
역할 분담 후 각자 Notion에 **“내가 맡은 기능 → 흐름 요약”**을 5줄로 정리

구현 전에는 반드시 → 구현 흐름을 도식화 (draw.io, mermaid)

GitHub PR에는 반드시 → “내가 한 작업 + 문제 발생 시도 내역” 템플릿으로 커밋"
"초반 수업 흐름이 너무 빠르고 정신이 없습니다.

💬 요점: 중요한 건 완벽한 이해가 아니라, **‘헷갈린 걸 붙잡아두는 루틴’**입니다.","수업이 너무 빨라서 당황스럽습니다.

익숙하지 않은 용어와 툴(예: Jupyter, Markdown, VSCode 등)은 당연히 버겁습니다. 아래 방식으로 안정감을 잡아보세요.

실행 방법:
Notion에 “오늘 처음 들은 단어 리스트” 만들기 → 수업 후 각자 1줄씩 정의 정리

수업 중 한 번이라도 놓친 내용은 즉시 “❓” 표시 → 수업 끝나고 반드시 검색 또는 질문

혼란 포인트는 블로그 회고에 “오늘 헷갈린 것 TOP3”로 요약"
"기본 지식이 부족해서 따라가기 벅찹니다.

💬 요점: 비전공자의 강점은 ‘기초를 꼼꼼히 짚는다’는 점입니다. **“외우지 말고 구조를 이해하라”**는 말 기억하세요.","비전공자인데 너무 어렵습니다.

전공자도 비슷한 지점에서 막힙니다. 중요한 건 속도가 아니라 기초를 반복해 체화하는 전략입니다.

실행 방법:
Python 문법은 교재 예제 → 빈칸만 다시 타이핑하는 방식으로 손에 익히기

실습 코드 중 이해 안 간 부분은 → 구글링 후 해당 줄 옆에 직접 주석 달기

“몰랐던 개념 요약 + 내가 해석한 방식”을 블로그 회고에 매일 1개씩 정리"
"수업이 끝나면 뭘 복습해야 할지 막막합니다.

💬 요점: 복습은 ‘전체 복습’이 아니라 ‘오류 중심 복습’이 진짜입니다.","복습을 잘 못 하겠어요. 어떻게 해야 하나요?

복습은 '전체 반복'이 아니라 **'오늘 막혔던 1~2개만 복습하는 구조'**로 접근해야 유지됩니다.

실행 방법:
수업이 끝난 직후 → “오늘 막혔던 코드 TOP2” 복사해서 내 Notion에 붙여놓기

저녁에 그 코드 다시 실행해보기 + 한 줄씩 설명 주석 달기

블로그 회고 제목을 **“오늘 내가 이해한 것 1개만 설명해보기”**로 제한"
"다들 빠르게 가는데 나는 하나하나 이해 안 돼요.

💬 요점: 진도는 따라가는 게 아니라 핵심만 추려서 붙잡는 방식으로 바꾸세요.","진도가 너무 빨라요. 놓치면 어떻게 하나요?

진도 스트레스를 줄이려면 “전체 중 핵심만 챙기는 기술”이 필요합니다.

실행 방법:
매 수업마다 “오늘 가장 핵심 개념 1개”만 선정해서 따로 정리

하루 10분만 투자해서 “내가 오늘 동기에게 설명할 수 있는 것 1개만 연습”

블로그 회고는 “수업 전체 정리”가 아니라, “오늘 개념 요약 1개 + 관련 예제 코드 1개” 구조로 단순화"
"강의 후 바로 실습하는 게 너무 부담입니다.

💬 요점: 실습은 완성보다 **“막히는 지점을 명확히 파악하고 저장하는 훈련”**입니다.","실습 시간이 너무 어려워요. 어떻게 적응해야 하죠?

실습은 시험이 아니라 **“실패 허용 구간”**입니다. 틀리고 구글링하고 고치면서 배우는 게 핵심이에요.

실행 방법:
실습 시간엔 처음부터 정답 찾으려 하지 말고, 빈칸부터 채워보기

막히는 포인트는 # ❓ 이 부분 잘 이해 안 됨 표시하고 저장

수업 끝난 뒤엔 GitHub에 내 실습 코드를 올리고, 주석으로 내가 직접 요약한 흐름 정리"
"하루 끝나면 진이 빠지고 ‘이 길이 맞나’ 싶은 생각이 듭니다.

💬 요점: 혼자 버티는 것보다 ‘같이 걷는 느낌’이 멘탈 유지에 제일 중요해요.","멘탈이 자꾸 무너집니다. 지치는 걸 어떻게 극복하죠?

중요한 건 **‘멘탈을 올리는 기술’보다 ‘무너지지 않게 받쳐주는 습관’**입니다.

실행 방법:
하루 마무리에 “오늘 이건 해냈다”를 Google Keep이나 다이어리에 1문장 기록

매주 금요일, 그 기록을 5분간 읽어보며 스스로의 흐름 확인

누군가의 회고글에 댓글 1개 달기 → 공감 공유가 멘탈에 큰 버팀목이 됨"
"블로그 회고 쓰는 게 어렵고, 중간에 자주 멈춰요.

💬 요점: 회고는 “자기에게 말 걸기”입니다. 매일 3문장이라도 좋습니다.","회고를 어떻게 써야 꾸준히 쓸 수 있나요?

회고는 잘 쓰는 게 아니라 **“쓰기 쉽게 구조화하는 게 먼저”**입니다.

실행 방법:
템플릿 고정:
① 오늘 배운 개념 1줄 요약
② 가장 막혔던 실습 설명
③ 내일 복습할 것 메모 1개

복붙 가능한 회고 틀을 Notion에 만들어두고, 매일 ‘비워진 틀’만 채우는 방식으로 작성"
"피드백을 들어도 막상 실전에 적용이 안 됩니다.

💬 요점: 피드백은 ‘정리-적용-되돌아보기’ 세 단계를 거쳐야 내 것이 됩니다.","강사님 피드백을 어떻게 활용해야 하나요?

피드백을 ‘한 번 듣고 끝’이 아니라, 실습 코드에 흡수시켜야 체화됩니다.

실행 방법:
수업 중 받은 피드백은 → 실습 코드 복붙 후 주석으로 요약해서 정리

“피드백 받은 날” 태그를 만들어서 매주 다시 그 코드만 열어보기

회고에 “오늘 들은 피드백 → 내가 바꾼 코드 예시”를 반드시 첨부"
"팀 프로젝트나 단위 과제가 너무 막막해요.

💬 요점: 프로젝트의 절반은 협업 구조 연습이에요. 보여주기보다 내가 이해한 걸 설명할 수 있게 정리하는 게 핵심입니다.","프로젝트나 과제가 너무 부담됩니다.

프로젝트는 완성보다 **""기록 중심 협업 연습""**이라고 생각하세요.

실행 방법:
회의 시간에는 ‘역할 분담’보다 먼저 “오늘 내가 해야 할 질문”을 미리 작성

팀 GitHub에 “📁 내 폴더 + README.md” 만들고 내가 맡은 파트 설명 5줄 이상 쓰기

기능 구현보다 먼저 → 데이터 흐름 도식화(예: mermaid, draw.io) 후 팀원 공유"
"질문이 어설플까봐 말 꺼내기가 힘듭니다.

💬 요점: 질문은 ‘나를 위한 검색 엔진 훈련’입니다. 자주 할수록, 더 똑똑하게 검색하는 사람이 됩니다.","질문을 잘 못하겠어요. 부끄럽고 눈치 보여요.

질문은 “모르는 걸 묻는 것”이 아니라 **“공유 가능한 사고의 흔적”**입니다.

실행 방법:
실습 중 막히면 # ❓질문 후보 태그 달기 → 수업 끝난 뒤 3개 중 1개만 정제해서 디스코드에 올리기

질문 포맷 고정: 문제상황 → 내가 시도한 방법 → 막힌 지점 요약

Notion에 “내가 했던 질문 모음집” 정리 → 나중에 블로그로 확장 가능"
"다들 앞서 나가는 것 같고, 나만 뒤처진 것 같아요.

💬 요점: 진도 전체가 아니라 ‘이해한 최소 단위’로 측정해야 성취감이 생깁니다.","진도가 빨라서 자꾸 불안해집니다.

진도 불안은 ‘전체를 따라가려는 마음’에서 옵니다. 핵심만 따라가야 합니다.

실행 방법:
수업마다 **“오늘 반드시 기억해야 할 개념 1개”**를 정해 따로 기록 (예: if 문, range 함수 등)

그 개념만으로 직접 예제 1개 만들기 (단순한 계산기, 구구단 등)

매주 금요일마다 “내가 확실히 이해한 개념 5개”만 추려서 Notion에 정리"
"비전공자인데, 전공자들 보면 위축돼요.

💬 요점: 비교는 ‘자료’로 활용해야 합니다. 정답보다 해석 방법을 훔치는 게 핵심입니다.","전공자와 비교되면서 자존감이 떨어집니다.

비교 스트레스는 피할 수 없지만, “비교 → 추월 전략”으로 전환할 수 있습니다.

실행 방법:
매일 10분간 ‘전공자 코드’ 1개만 따라 써보고, 내가 이해한 방식으로 주석 달기

스터디 참여 전 → “오늘 내가 질문할 것 1개”를 미리 정리해 질문 훈련하기

매주 수요일 → ‘지난주 내 실습 코드’와 ‘스터디 코드’ 비교 후 리팩토링 연습"
"꾸준히 복습하는 습관을 어떻게 만들 수 있을까요?

💬 요점: 복습은 양보다 반복성과 패턴화가 핵심입니다.","복습 루틴을 만들어보고 싶은데 잘 안 됩니다.

복습은 정해진 시간보다 **‘지나간 개념을 다시 불러오는 흐름’**을 만드는 게 중요합니다.

실행 방법:
하루 루틴 구조 고정:
오전 수업 전 15분: 전날 실습 코드 다시 보기
점심 직전 10분: 오전 수업 핵심 개념 요약
퇴근 전 5분: 오늘 가장 헷갈렸던 개념 메모

주말: “이번주 개념 퀴즈” 형식으로 노션에 자기 문제 만들기"
"구글링이 익숙하지 않아 막히면 바로 멘붕입니다.

💬 요점: 구글링은 읽는 게 아니라 실행과 연결될 때 진짜 실력이 됩니다.","구글링으로 혼자 해결하는 게 어렵습니다.

검색은 기술입니다. 문장 쓰듯 찾지 말고, 키워드 단위로 쪼개세요.

실행 방법:
검색할 땐 파이썬 + 문제 핵심 키워드 조합으로 검색 (예: ""파이썬 리스트 중복 제거"")

Stack Overflow 찾을 땐 에러 메시지 전체 복붙 → 첫 5개 답변만 정독

찾은 코드 중 마음에 드는 것 1개를 직접 타이핑하며 실행 + 주석 추가"
"배운 건 많은데, 내가 진짜 늘고 있는지 모르겠어요.

💬 요점: 성장 체감은 비교가 아니라 기록을 통한 되짚기에서 옵니다.","성장이 체감되지 않아 불안합니다.

성장은 절대 감정이 아니라 기록으로 확인해야 합니다.

실행 방법:
매주 회고에 “이번주 내가 처음 성공한 코드/개념” 항목 따로 만들기

실습한 코드 중에서 가장 애쓴 코드 1개 골라 → 파일명에 날짜 + 주석 달아 보관

금요일마다 그 주 월요일 코드와 비교해서 줄 수/반복/주석 등을 직접 비교"
"실습을 바로 하라는데 뭐부터 해야 할지 막막해요.

💬 요점: 실습은 **‘내가 무엇을 모르는지 확인하는 절차’**입니다. 완성보다 로그가 중요합니다.","실습 위주 수업이 부담스럽습니다.

실습은 정답을 만드는 게 아니라, **“막히는 포인트를 수집하는 시간”**입니다.

실행 방법:
실습 시작 전 → 강의 예제 중 “비슷한 유형의 문제” 1개 복사해서 먼저 실행해보기

코드 작성 시, 막히는 부분은 # 여기가 왜 안 되는지 모르겠음 주석 추가

실습 후, 본인 코드에 주석으로 실행 흐름 정리 → GitHub에 업로드"
"뭘 물어봐야 할지도 모르겠고, 괜히 눈치 보여요.

💬 요점: 질문은 '전달력' 훈련입니다. 포맷을 고정하면 쉽게 던질 수 있어요.","질문하기가 너무 어렵습니다.

질문은 **'답을 얻는 행위'가 아니라, '사고 흐름을 검증하는 도구'**입니다.

실행 방법:
Notion에 “내가 막힌 지점 정리 템플릿” 만들기:
① 문제 상황 ② 내가 시도한 것 ③ 현재 상태

수업 중 질문이 생기면 메모해두고 → 끝나고 3개 중 1개만 디스코드에 공유

스터디나 조원에게 질문할 땐, 해당 코드와 에러 메시지를 함께 전달"
"수업 끝나면 뭘 배웠는지 까먹어요.

💬 요점: 요약은 끝나고 하는 게 아니라, 수업 중에 자동화된 구조로 수집하는 게 효과적입니다.","강의 내용을 기억에 남기기 어렵습니다.

강의 정리는 수업 직후 15분 요약 루틴이 핵심입니다.

실행 방법:
수업 끝난 직후, 오늘 새로 배운 개념 1~2개를 Markdown에 적기

그 개념을 활용한 예제를 1줄 코드로 작성 + 출력값 확인

“배운 개념 + 내가 작성한 예시 + 설명”을 블로그 회고에 고정 템플릿으로 정리"
"다른 사람들은 다 잘해 보이고 나만 부족해 보여요.

💬 요점: 비교를 멈출 수 없다면, 그걸 ‘학습 재료’로 쓰는 게 실력자의 전략입니다.","실력 있는 동기들과 비교하게 됩니다.

비교는 감정이 아니라 자료로 수집해서 '패턴'을 분석하는 도구로 바꿔야 합니다.

실행 방법:
동기 코드 중 “깔끔하다고 느낀 코드” 1개만 복사 → 내 코드와 한 줄씩 비교 주석 작성

내가 놓친 부분은 → “리팩토링 기록용” Notion에 모아두기

매주 금요일마다 ‘내가 이번주 가장 많이 실수한 코드 패턴 TOP3’ 정리"
"프로젝트가 뭔가 거창하고, 나만 민폐될까봐 겁나요.

💬 요점: 프로젝트는 실력이 아니라 기록과 소통 훈련의 장입니다. 말보다 문서가 신뢰를 만듭니다.","단위 프로젝트나 과제가 어렵고 무섭습니다.

프로젝트는 완성보다 ‘기록과 커뮤니케이션 훈련’에 중점을 둬야 적응이 쉬워요.

실행 방법:
역할 분담 후 각자 Notion에 **“내가 맡은 기능 → 흐름 요약”**을 5줄로 정리

구현 전에는 반드시 → 구현 흐름을 도식화 (draw.io, mermaid)

GitHub PR에는 반드시 → “내가 한 작업 + 문제 발생 시도 내역” 템플릿으로 커밋"
